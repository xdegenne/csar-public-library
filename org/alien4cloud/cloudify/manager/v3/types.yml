tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: org.alien4cloud.cloudify.manager.v3
  template_version: 1.4.0-SNAPSHOT
  template_author: alien4cloud

description: TOSCA template that contains a basic node type to install a cloudify manager.

imports:
  - tosca-normative-types:1.0.0-ALIEN14
  - org.alien4cloud.rabbitmq.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.postgresql.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.elasticsearch.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.cloudify.manager.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.cloudify.manager.v4:1.4.0-SNAPSHOT

node_types:

  org.alien4cloud.cloudify.manager.v3.nodes.Cloudify3Manager:
    derived_from: org.alien4cloud.cloudify.manager.pub.nodes.CloudifyManagerService
    description: Cloudify CLI and Manager in place installation.
    properties:
      ssh_user:
        type: string
        required: true
        description: User of the manager machine to be used by the cloudify manager.
      ssh_key_filename:
        type: string
        required: true
        description: Name of the file in which we will store the manager ssh key (see required artifact).
      keypair_name:
        type: string
        required: false
        description: Optional name of the key as known by the iaas (in case of iaas key).
      agents_user:
        type: string
        required: true
        description: Default ssh user for agents.
      admin_username:
        type: string
        required: true
        description: Administration account username.
      admin_password:
        type: string
        required: true
        description: Administration account password.
      component_version:
        type: version
        default: 3.4.2
        constraints:
          - valid_values: [ "3.4.2" ]
    attributes:
      manager_url: { concat: ["https://", get_attribute: [HOST, public_ip_address], ":", get_property: [SELF, cloudify_api_v3, port]] }
    capabilities:
      cloudify_modules:
        type: org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyManagerContainer
        occurrences: [ 0, UNBOUNDED ]
      elastic_search:
        type: org.alien4cloud.elasticsearch.pub.capabilities.ElasticSearchRestAPI
        occurrences: [ 0, UNBOUNDED ]
        properties:
          port: 9200
      rabbitmq_management:
        type: org.alien4cloud.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint
        occurrences: [ 0, UNBOUNDED ]
        properties:
          protocol: http
          port: 15672
          user: cloudify
          password: c10udify
    requirements:
      - host: # Overrides the parent host requirement to add a specific node_filter and add OS constraints as Impl is based on apt and so restricted to debian.
          capability: tosca.capabilities.Container
          node: tosca.nodes.Compute
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
          node_filter:
            capabilities:
              - tosca.capabilities.OperatingSystem:
                  properties:
                    - type: { equal: linux }
                    - architecture: { equal: x86_64 }
                    - distribution: { valid_values: [ "red hat", "centos", "rhel" ] }
              - tosca.capabilities.Container:
                  properties:
                    - num_cpus: { greater_or_equal: 2 }
                    - mem_size: { greater_or_equal: "4 Gib" }
    interfaces:
      Standard:
        create:
            implementation: scripts/Cloudify3Manager/install.sh
        configure:
          inputs:
            SSH_USER: { get_property: [SELF, ssh_user] }
            SSH_KEY_FILENAME: { get_property: [SELF, ssh_key_filename] }
            AGENTS_USER: { get_property: [SELF, agents_user] }
            ADMIN_USERNAME: { get_property: [SELF, cloudify_api_v3, admin_username] }
            ADMIN_PASSWORD: { get_property: [SELF, cloudify_api_v3, admin_password] }
            PUBLIC_IP: { get_attribute: [HOST, public_ip_address] }
            PRIVATE_IP: { get_attribute: [HOST, ip_address] }
            RABBITMQ_USER: { get_property: [SELF, rabbitmq_management, user] }
            RABBITMQ_PASSWORD: { get_property: [SELF, rabbitmq_management, password] }
          implementation: scripts/Cloudify3Manager/configure.sh
        start:
          inputs:
            ADMIN_USERNAME: { get_property: [SELF, cloudify_api_v3, admin_username] }
            ADMIN_PASSWORD: { get_property: [SELF, cloudify_api_v3, admin_password] }
            API_PORT: { get_property: [SELF, cloudify_api_v3, port] }
            API_PROTOCOL: https
            MAX_INSTANCES: { get_property: [HOST, scalable, max_instances] }
          implementation: scripts/Cloudify3Manager/start.sh
    artifacts:
      - resources:
          file: files/Cloudify3Manager
          type: tosca.artifacts.File
      - key_file:
          file: key.pem
          type: tosca.artifacts.File
          description: This artifact contains the manager ssh key. Note that by default it will also be used

  org.alien4cloud.cloudify.manager.v3.nodes.Cloudify3AwsConfiguration:
    derived_from: org.alien4cloud.cloudify.manager.v4.nodes.CloudifyAwsConfiguration
    description: Configure the cloudify manager for aws.
    interfaces:
      Standard:
        start:
          inputs:
            SSH_KEY_FILENAME: { get_property: [HOST, ssh_key_filename] }
            KEYPAIR_NAME: { get_property: [HOST, keypair_name] }
            ADMIN_USERNAME: { get_property: [HOST, cloudify_api_v3, admin_username] }
            ADMIN_PASSWORD: { get_property: [HOST, cloudify_api_v3, admin_password] }
          implementation: scripts/Cloudify3Manager/aws_do_configure.sh
    artifacts:
      - resources:
          file: files/Cloudify3Manager
          type: tosca.artifacts.File
